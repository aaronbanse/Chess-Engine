void Game::generateDataFile() {
    std::ifstream data;
    std::ofstream inputData;

    data.open("source code/data.pgn");
    inputData.open("source code/inputData.txt");

    std::string str;

    std::ifstream readData ("source code/inputData.txt");



    if ( data.is_open() ) {
        while ( data.good() ) {
            data >> str;
            if(str == "1.") {
                std::string temp;
                data >> temp;
                data >> str;
                if(str == "{") {
                    std::string game;
                    bool valid = true;
                    BoardState cur;
                    cur = cur.movePiece(getMove(temp, cur));
                    game += cur.toData();
                    data >> str;
                    data >> str;
                    str.pop_back();
                    game += " " + str + "\n";
                    data >> str;
                    data >> str;
                    data >> str;

                    while (str != "[Event" && data.good()) {
                        if(str.back() == '#') {
                            str.pop_back();
                            if(getMove(str, cur).special == -1) valid = false;
                            //std::cout << str << cur.display();
                            cur = cur.movePiece(getMove(str, cur));
                            game += cur.toData();
                            game += " ";
                            game += (cur.isWhiteTurn() ? "-20" : "20");
                            game += "\n";
                            data >> str;
                        } else {
                            if(getMove(str, cur).special == -1) valid = false;
                            //std::cout << str << cur.display();
                            cur = cur.movePiece(getMove(str, cur));
                            game += cur.toData();
                            data >> str;
                            data >> str;
                            data >> str;
                            str.pop_back();
                            if (str.front() == '#') str = (str[1] == '-' ? "-15" : "15");
                            if(std::stof(str) > 15) str = "15";
                            if(std::stof(str) < -15) str = "-15";

                            game += " ";
                            game += str;
                            game += "\n";
                            data >> str;
                            data >> str;
                        }

                        if (data.good()) data >> str;
                    }
                    if(valid) inputData << game;
                }
            }
        }
    }
}




Unused getmove function

Move Game::getMove(std::string input, BoardState cur) {
    if (input == "best") {
        return cur.bestMove();
    }
    if (input == "print") {
        std::cout << cur.printMoves();
        return {};
    }

    input.erase(remove(input.begin(), input.end(), 'x'), input.end());
    input.erase(remove(input.begin(), input.end(), '+'), input.end());
    input.erase(remove(input.begin(), input.end(), '='), input.end());
    input.erase(remove(input.begin(), input.end(), '#'), input.end());
    input.erase(remove(input.begin(), input.end(), '?'), input.end());
    input.erase(remove(input.begin(), input.end(), '!'), input.end());

    if (input.length() < 2) return {};

    if (input == "O-O" || input == "O-O-O") {
        if (cur.legalMove(Move(input))) {
            return {input};
        } else { return {}; }
    }

    int id;
    int ox = -1;
    int oy = -1;
    int nx = 0;
    int ny = 0;
    char prom = 0;


    int i = 0;

    if (input[i] >= 'A' && input[i] <= 'Z') {
        switch (input[i]) {
            case 'R':
                id = 1;
                break;
            case 'N':
                id = 2;
                break;
            case 'B':
                id = 3;
                break;
            case 'Q':
                id = 4;
                break;
            case 'K':
                id = 5;
                break;
            default:
                return {};
        }
        i++;
    } else {
        id = 6;
    }


    if (input.length() - i < 2) return {};

    if (input[i] >= '1' && input[i] <= '8') {
        oy = input[i] - '1';
        i++;
        if (input[i] >= 'a' && input[i] <= 'h') {
            nx = input[i] - 'a';
            if (input.length() - 1 > 1) {
                i++;
                if (input[i] >= '1' && input[i] <= '8') {
                    ny = input[i] - '1';
                } else {
                    return {};
                }
            }
        }
    } else if (input[i] >= 'a' && input[i] <= 'h') {
        i++;
        if (input[i] >= '1' && input[i] <= '8') {
            nx = input[i - 1] - 'a';
            ny = input[i] - '1';
        } else if (input[i] >= 'a' && input[i] <= 'h') {
            ox = input[i - 1] - 'a';
            nx = input[i] - 'a';
            if (input.length() - 1 > 1) {
                i++;
                if (input[i] >= '1' && input[i] <= '8') {
                    ny = input[i] - '1';
                } else {
                    return {};
                }
            }
        } else {
            return {};
        }
    } else {
        return {};
    }

    // set default prom
    if (id == 6 && ny == (cur.isWhiteTurn() ? 7 : 0)) {
        prom = 'Q';
    }

    if (input.length() - i > 1 && id == 6) {
        i++;
        if (input[i] == 'N' || input[i] == 'B' || input[i] == 'R' || input[i] == 'Q') prom = input[i];
    }

    // since we don't know origin coords, search board for squares with id that could be the one to move
    for (int j = 0; j < 8; j++) {
        for (int k = 0; k < 8; k++) {
            if (cur.getSquare(j, k).id() == id && cur.getSquare(j, k).isWhite() == cur.isWhiteTurn()
                && (j == ox || k == oy || ox == oy) && cur.legalMove(Move(j, k, nx, ny, prom))) {
                ox = j;
                oy = k;
            }
        }
    }

    if (ox == -1 || oy == -1) {
        return {};
    }



    return {ox, oy, nx, ny, prom};
}


std::string BoardState::toData() {
    std::string data;
    data += (whiteTurn ? "1" : "0");
    for(bool& c : canCastle) {
        data += (c ? "1" : "0");
    }

    for(uint j = 0; j < 8; j++) {
        for(uint i = 0; i < 8; i++) {
            data += (squares[i][j].isWhite() ? "1" : "0");
            int id = squares[i][j].id() + 1;
            std::string idB;
            // convert id to binary
            idB.push_back('0' + id / 4);
            id = id % 4;
            idB.push_back('0' + id / 2);
            id = id % 2;
            idB.push_back('0' + id);
            data += idB;
        }
    }

    return data;
}


BoardState::BoardState(std::string rep) {
    whiteTurn = rep[0] - '0';
    for(int i = 1; i < 5; i++) {
        canCastle[i - 1] = rep[i] - '0';
    }

    for(int i = 0; i < 64; i++) {
        bool white = rep[i * 4 + 5] - '0';
        int id = -1;
        id += (rep[i * 4 + 6] - '0') * 4;
        id += (rep[i * 4 + 7] - '0') * 2;
        id += (rep[i * 4 + 8] - '0') * 1;
        squares[i % 8][i / 8] = Square(white, id);
    }
}